workflow:
  rules:
    # Don't create pipelines on push for any branches other than the default
    # branch -- if such pipelines are needed, they will be triggered from
    # elsewhere. Also, don't run dev pipelines in staging repos.
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      when: never
    - if: '$CI_PROJECT_NAME != "analytics" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: never
    - when: always

# Define the potential stages that can be run in a GitLab CI pipeline job
stages:
  - setup
  - lint
  - test
  - docs
  - test-release
  - release
  - handler

include: ".ci/common.yml"

# "Fake" job to prevent dev pipelines from being interrupted on new commits.
# See gitlab-org/gitlab#34221
prevent_dev_interrupt:
  stage: setup
  script:
    - echo "No-op job to prevent dev pipelines from being interrupted"
  variables:
    GIT_STRATEGY: none
  timeout: 1m
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

package:
  extends: .base
  stage: setup
  needs: []
  image: registry.gitlab.com/tumult-labs/ops/ci/linux:python3.7
  script:
    - nox -s build
  artifacts:
    paths: ["dist/"]
  timeout: 10m
  interruptible: true
  tags: [aws-small]

lint:
  extends: .base
  stage: lint
  needs: ["package"]
  script:
    - nox -t lint -- --check
  timeout: 20m
  rules:
    - if: '$NIGHTLY == "true"'
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: on_success

test:
  extends: .base
  stage: test
  needs: ["package"]
  script:
    # Run doctest before test_fast so that it doesn't overwrite the coverage
    # report from test_fast.
    - nox -s test_smoketest test_doctest test_fast
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    paths: ["coverage/"]
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
    expose_as: "Coverage"
  timeout: 1h
  rules:
    - if: '$NIGHTLY == "true"'
      when: never
    - if: '$CI_COMMIT_TAG || $PARENT_PIPELINE_ID'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - when: manual
      allow_failure: true
  tags: [aws-c6a.xlarge]

test_demos:
  extends: test
  script:
    - nox -s test_demos
  coverage: null
  artifacts: null
  timeout: 1h
  tags: [aws-c6a.xlarge]

test_slow:
  extends: test
  script:
    - nox -s test_slow
  timeout: 23h
  rules:
    - if: '$NIGHTLY == "true"'
    - if: '$CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: manual
      allow_failure: true

test_dep_matrix:
  extends: .base
  stage: test
  needs: ["package"]
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        TEST_TYPE: ["oldest", "newest"]
      - PYTHON_VERSION: ["3.7"]
        TEST_TYPE: ["pyspark3.1", "pyspark3.2"]
  image: registry.gitlab.com/tumult-labs/ops/ci/linux:python${PYTHON_VERSION}
  rules:
    - if: '$NIGHTLY == "true"'
    - if: '$CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: manual
      allow_failure: true
  script:
    - pip install -U pip setuptools
    - nox -s "test_dependency_matrix(${PYTHON_VERSION}-${TEST_TYPE})"
  cache:
    - key:
        prefix: "$PYTHON_VERSION-$TEST_TYPE"
        files: ["poetry.lock"]
      paths: [".cache/pip"]
  timeout: 3h
  tags: [aws-c6a.xlarge]
  interruptible: true

docs:
  extends: .base
  stage: docs
  needs: ["package"]
  script:
    - nox -t docs
  artifacts:
    paths:
      - public/
    expose_as: "Documentation"
  timeout: 1h
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - when: manual
      allow_failure: true

test_release_linux:
  extends: .base
  stage: test-release
  needs: ["package"]
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10", "3.11"]
  image: registry.gitlab.com/tumult-labs/ops/ci/linux:python${PYTHON_VERSION}
  script:
    - nox -s release_smoketest release_test
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
  timeout: 1h
  rules:
    - if: '$NIGHTLY == "true"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: manual
      allow_failure: true
  tags: [aws-c6a.xlarge]

audit:
  extends: .base
  stage: test-release
  needs: ["package"]
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.9", "3.10", "3.11"]
  image: registry.gitlab.com/tumult-labs/ops/ci/linux:python${PYTHON_VERSION}
  script:
    - nox -s "audit(python=\"${PYTHON_VERSION}\")"
  timeout: 10m
  rules:
    - if: '$NIGHTLY == "true"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: manual
      allow_failure: true

publish:
  stage: release
  dependencies: [package]
  image: registry.gitlab.com/tumult-labs/ops/ci/ci-full:latest
  variables:
    # multi-repo: include when=ce
    POETRY_USER: "__token__"
    POETRY_PASSWORD: "${RELEASE_PYPI_TOKEN}"
    POETRY_PUBLISH: "poetry publish"
    # multi-repo: end
    # multi-repo: include when=ee
    POETRY_USER: "gitlab-ci-token"
    POETRY_PASSWORD: "${CI_JOB_TOKEN}"
    POETRY_PUBLISH: "poetry publish --repository gitlab"
    # multi-repo: end
  # multi-repo: include when=ee
  before_script:
    - poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
  # multi-repo: end
  script:
    - $POETRY_PUBLISH -u "$POETRY_USER" -p "$POETRY_PASSWORD"
  timeout: 3m
  rules:
    - if: '$CI_COMMIT_TAG'
  interruptible: false

# This job requires the DOCS_TOKEN_USER and DOCS_TOKEN variables to be set. They
# should be the name and token of a project access token from the
# tumult-labs/ops/docs.tmlt.dev project with the read_repository and
# write_repository permissions. The bot user for this token must have permission
# to push the protected `prod` branch.
publish_docs:
  stage: release
  dependencies: [docs]
  image: registry.gitlab.com/tumult-labs/ops/ci/ci-full:latest
  variables:
    GIT_STRATEGY: none
    DOCS_GIT: "https://$DOCS_TOKEN_USER:$DOCS_TOKEN@gitlab.com/tumult-labs/ops/docs.tmlt.dev.git"
    DOCS_ROOT: "docs.tmlt.dev/public/analytics"
  before_script:
    - |
      if [[ -z "$DOCS_TOKEN_USER" || -z "$DOCS_TOKEN" ]]; then
        echo "Credentials for publishing to docs repo are not set"
        exit 1
      fi
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        version="$CI_COMMIT_BRANCH"
        docs_version="$version"
      else
        version="$CI_COMMIT_TAG"
        # Check if this tag is a pre-release.
        if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta|rc)\.[0-9]+$ ]]; then
          echo "Version $version is a pre-release, skipping docs publication."
          exit 0
        fi
        # Convert X.Y.Z semantic version to vX.Y for docs.
        docs_version="v$(echo $version | sed -E 's/^([[:digit:]]+\.[[:digit:]]+).*/\1/')"
      fi
    - echo "Publishing version $version as $docs_version..."
  script:
    - git clone $DOCS_GIT
    # Remove old docs published as this version, if any
    - rm -rf $DOCS_ROOT/$docs_version
    - mv public/ $DOCS_ROOT/$docs_version
    - cd docs.tmlt.dev
    - git config user.name "gitlab"
    - git config user.email "gitlab@tmlt.io"
    - git add public
    - git diff --staged --stat
    - git commit -m "[auto] Publish docs for $version ($CI_COMMIT_SHORT_SHA)" --author "$CI_COMMIT_AUTHOR"
    - git push
  timeout: 3m
  interruptible: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_TAG'

# Requires the following CI variables to be set:
# * RELEASE_SLACK_WEBHOOK_URL, a Slack incoming webhook for posting to the appropriate
#   channel
release_handler:
  stage: handler
  script:
    - source .ci/pipeline-handlers.bash
    - release_handler
  timeout: 2m
  rules:
    - if: '$CI_COMMIT_TAG'
  interruptible: false
